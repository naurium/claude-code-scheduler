#!/bin/bash

# LaunchD handles the scheduling - we just run when called
export HOME="${HOME_DIR}"
export PATH="$$HOME/.local/bin:$$HOME/.npm-global/bin:$$HOME/.yarn/bin:/usr/local/bin:/opt/homebrew/bin:$$PATH"

sudo -u ${USERNAME} bash << 'EOF'
export HOME="${HOME_DIR}"
export PATH="$$HOME/.local/bin:$$HOME/.npm-global/bin:$$HOME/.yarn/bin:/usr/local/bin:/opt/homebrew/bin:$$PATH"
LOG_FILE="${LOG_DIR}/claude_scheduler.log"
mkdir -p "$$(dirname "$$LOG_FILE")"

echo "$$(date '+%Y-%m-%d %H:%M:%S') - Starting scheduled task" >> "$$LOG_FILE"
echo "$$(date '+%Y-%m-%d %H:%M:%S') - Running command: ${COMMAND}" >> "$$LOG_FILE"

# Extract the actual command (first word, might be full path)
FULL_COMMAND="${COMMAND}"
CMD_TO_CHECK=$${FULL_COMMAND%% *}

# Check if the command exists (works for both 'claude' and '/path/to/claude')
if command -v "$$CMD_TO_CHECK" &> /dev/null || [[ -x "$$CMD_TO_CHECK" ]]; then
    # Run command and capture output for error analysis
    OUTPUT=$$(${COMMAND} 2>&1)
    EXIT_CODE=$$?
    echo "$$OUTPUT" >> "$$LOG_FILE"
    
    if [[ $$EXIT_CODE -eq 0 ]]; then
        echo "$$(date '+%Y-%m-%d %H:%M:%S') - Task completed successfully" >> "$$LOG_FILE"
        
        # Send success notification if configured
        if [[ -n "${NTFY_TOPIC}" ]]; then
            curl -s -d "✅ Claude session refreshed at $$(date '+%H:%M')" \
                 ntfy.sh/${NTFY_TOPIC} >> "$$LOG_FILE" 2>&1
        fi
    else
        echo "$$(date '+%Y-%m-%d %H:%M:%S') - Task failed with exit code $$EXIT_CODE" >> "$$LOG_FILE"
        
        # Send error notification if configured
        if [[ -n "${NTFY_TOPIC}" ]]; then
            # Check for specific error types
            if echo "$$OUTPUT" | grep -q "Invalid API key"; then
                curl -s -d "🔑 Claude API error - please run /login" \
                     -H "Priority: high" \
                     ntfy.sh/${NTFY_TOPIC} >> "$$LOG_FILE" 2>&1
            else
                curl -s -d "⚠️ Claude scheduler failed - check logs (exit code: $$EXIT_CODE)" \
                     -H "Priority: high" \
                     ntfy.sh/${NTFY_TOPIC} >> "$$LOG_FILE" 2>&1
            fi
        fi
    fi
else
    echo "$$(date '+%Y-%m-%d %H:%M:%S') - ERROR: Command not found or not executable: $$CMD_TO_CHECK" >> "$$LOG_FILE"
    echo "Full command was: ${COMMAND}" >> "$$LOG_FILE"
    
    # Send error notification if configured
    if [[ -n "${NTFY_TOPIC}" ]]; then
        curl -s -d "⚠️ Claude scheduler failed - command not found" \
             -H "Priority: high" \
             ntfy.sh/${NTFY_TOPIC} >> "$$LOG_FILE" 2>&1
    fi
fi

echo "---" >> "$$LOG_FILE"
EOF

# Refresh wake schedules after each run (runs with root privileges)
if [[ "${ENABLE_WAKE}" == "true" ]]; then
    # Clear existing wake schedules
    pmset schedule cancelall 2>/dev/null
    
    # Get current time
    CURRENT_HOUR=$$(date +%H)
    CURRENT_MIN=$$(date +%M)
    CURRENT_TIME=$$((10#$$CURRENT_HOUR * 60 + 10#$$CURRENT_MIN))
    
    # Define schedule times (in minutes from midnight) with wake offset
    WAKE_OFFSET=${WAKE_MINUTES}
    declare -a SCHEDULE_TIMES=(${SCHEDULE_TIMES})
    
    # Set wake times for TODAY (remaining sessions)
    TODAY=$$(date '+%m/%d/%y')
    for SCHED_TIME in $${SCHEDULE_TIMES[@]}; do
        if [[ $$SCHED_TIME -gt $$CURRENT_TIME ]]; then
            WAKE_TIME=$$((SCHED_TIME - WAKE_OFFSET))
            HOUR=$$((WAKE_TIME / 60))
            MIN=$$((WAKE_TIME % 60))
            pmset schedule wake "$$TODAY $$(printf %02d $$HOUR):$$(printf %02d $$MIN):00" 2>/dev/null
        fi
    done
    
    # Set wake times for TOMORROW (all 4 sessions)
    TOMORROW=$$(date -v+1d '+%m/%d/%y')
    for SCHED_TIME in $${SCHEDULE_TIMES[@]}; do
        WAKE_TIME=$$((SCHED_TIME - WAKE_OFFSET))
        HOUR=$$((WAKE_TIME / 60))
        MIN=$$((WAKE_TIME % 60))
        pmset schedule wake "$$TOMORROW $$(printf %02d $$HOUR):$$(printf %02d $$MIN):00" 2>/dev/null
    done
    
    # Log wake schedule update
    echo "$$(date '+%Y-%m-%d %H:%M:%S') - Wake schedules refreshed" >> "${LOG_DIR}/system.log"
fi