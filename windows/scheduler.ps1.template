$$logDir = "${LOG_DIR}"
$$logFile = Join-Path $$logDir "claude_scheduler.log"

if (!(Test-Path $$logDir)) {
    New-Item -ItemType Directory -Path $$logDir -Force | Out-Null
}

# Run claude through WSL
$$fullCommand = '${COMMAND}'

$$timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
Add-Content -Path $$logFile -Value "$$timestamp - Starting scheduled task"
Add-Content -Path $$logFile -Value "$$timestamp - Running command: $$fullCommand"

try {
    # Set working directory
    $$workingDir = '${WORKING_DIR_VALUE}'
    if ($$workingDir -eq '~' -or $$workingDir -eq '') {
        $$workingDir = '$$HOME'
    }
    
    # Build single-line command for WSL to avoid all CRLF issues
    # Include NVM path for claude and source bashrc for full environment
    # Use single quotes for PATH to prevent bash from interpreting Windows paths with special chars
    $$wslCommand = "source ~/.bashrc 2>/dev/null; source ~/.nvm/nvm.sh 2>/dev/null; export PATH='`$$HOME/.nvm/versions/node/v20.19.3/bin:`$$HOME/.local/bin:`$$HOME/.npm-global/bin:/usr/local/bin:/usr/bin:/bin'; cd $$workingDir && $$fullCommand"
    
    # Execute as single-line command - proven to work in tests
    # CRITICAL: Quote the command to pass it as a single argument to bash
    $$output = wsl bash -c "$$wslCommand" 2>&1
    $$exitCode = $$LASTEXITCODE
    
    # Log the command output directly (macOS style)
    if ($$output) {
        # Handle both string and array output
        if ($$output -is [array]) {
            $$output | ForEach-Object { Add-Content -Path $$logFile -Value $$_ }
        } else {
            Add-Content -Path $$logFile -Value $$output
        }
    }
    
    if ($$exitCode -eq 0) {
        $$endTimestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        Add-Content -Path $$logFile -Value "$$endTimestamp - Task completed successfully"
        
        # Send success notification if configured
        $$ntfyTopic = "${NTFY_TOPIC}"
        if ($$ntfyTopic) {
            $$time = Get-Date -Format "HH:mm"
            try {
                Invoke-RestMethod -Uri "https://ntfy.sh/$$ntfyTopic" -Method Post `
                    -Body "Claude session refreshed at $$time" | Out-Null
                Add-Content -Path $$logFile -Value "Success notification sent to ntfy.sh/$$ntfyTopic"
            } catch {
                Add-Content -Path $$logFile -Value "Failed to send notification: $$_"
            }
        }
    } else {
        $$endTimestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        Add-Content -Path $$logFile -Value "$$endTimestamp - Task failed with exit code $$exitCode"
        
        # Send error notification if configured
        $$ntfyTopic = "${NTFY_TOPIC}"
        if ($$ntfyTopic) {
            # Check for specific error types
            if ($$output -match "Invalid API key") {
                try {
                    Invoke-RestMethod -Uri "https://ntfy.sh/$$ntfyTopic" -Method Post `
                        -Body "Claude API error - please run /login" `
                        -Headers @{"Priority"="high"} | Out-Null
                } catch {
                    Add-Content -Path $$logFile -Value "Failed to send notification: $$_"
                }
            } elseif ($$output -match "command not found") {
                try {
                    Invoke-RestMethod -Uri "https://ntfy.sh/$$ntfyTopic" -Method Post `
                        -Body "Claude not found - check PATH in WSL" `
                        -Headers @{"Priority"="high"} | Out-Null
                } catch {
                    Add-Content -Path $$logFile -Value "Failed to send notification: $$_"
                }
            } else {
                try {
                    Invoke-RestMethod -Uri "https://ntfy.sh/$$ntfyTopic" -Method Post `
                        -Body "Claude scheduler failed - check logs (exit code: $$exitCode)" `
                        -Headers @{"Priority"="high"} | Out-Null
                } catch {
                    Add-Content -Path $$logFile -Value "Failed to send notification: $$_"
                }
            }
        }
    }
} catch {
    $$errorTimestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Add-Content -Path $$logFile -Value "$$errorTimestamp - ERROR: Failed to run claude through WSL"
    Add-Content -Path $$logFile -Value "Error details: $$_"
    
    # Send error notification if configured
    $$ntfyTopic = "${NTFY_TOPIC}"
    if ($$ntfyTopic) {
        try {
            Invoke-RestMethod -Uri "https://ntfy.sh/$$ntfyTopic" -Method Post `
                -Body "Claude scheduler failed - WSL error" `
                -Headers @{"Priority"="high"} | Out-Null
        } catch {
            Add-Content -Path $$logFile -Value "Failed to send notification: $$_"
        }
    }
}

Add-Content -Path $$logFile -Value "---"